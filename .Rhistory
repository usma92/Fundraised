hook_output(x, options)
})
options(knitr.table.format = "latex")
FullData.Registrants <- read.csv("All Registrants Combined 2017-2019 Scrubbed.csv")
# Load libraries
library(tidyverse)
library(skimr) # for describing data
library(Hmisc) # for describing data
library(corrplot) # for making correlation plot
library(caret) # for training
library(gbm) # for boosted regression
library(glmnet) # for LASSO
library(png)
library(corrplot)
library(ROCR)
library(earth)
library(rpart)
library(party)
library(partykit)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(gmodels)
# Load and Describe Data -------------------------------------------------------
# Import data
setwd("~/GitHub/Fundraised")
csvName <- "InvidualParticipants.csv"
AllWalkData <- read.csv(csvName, stringsAsFactors=TRUE)
# Convert the integer variables to numerics
AllWalkData <- AllWalkData %>% mutate_if(is.integer, as.numeric)
summary(AllWalkData)
str(AllWalkData)
dim(AllWalkData)
AllWalkData %>% skim()
Hmisc::describe(AllWalkData)
# Select variables to use in exploration models
AllWalkData.ModelVars <- AllWalkData %>%
select(c(MeanLeadTime, MeanGoal, DistanceTraveled, SelfDonated, Fundraised,
ModifiedGoal, UpdatedPersonalPage, SentEmails,
CompletedReg, ProvidedParticipationReason, MeanTeamGoal,
RepeatParticipant))
# make index to split dataset
index.ModelVars <- createDataPartition(AllWalkData.ModelVars$SelfDonated,
p=0.8, list=FALSE)
# Split dataset into train and test
df.train <- AllWalkData.ModelVars[index.ModelVars, ]
df.test <- AllWalkData.ModelVars[-index.ModelVars,  ]
View(df.test)
View(df.test)
View(df.train)
View(df.train)
# make transformed train dataset that is centered and scaled
df.train.preprocess <- df.train %>% preProcess(method = c("center", "scale"))
df.train.transformed <- df.train.preprocess %>% predict(df.train)
# prepare training scheme
trCtrl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
verboseIter=TRUE)
# LVQ Classification--------------------------------------------------------------------------
# train the model
par(mfrow=c(1,1))
model.Fundraised.lvq <- train(Fundraised~.,
data=df.train,
method="lvq",
preProcess=c("center","scale"),
trControl=trCtrl,
tuneLength=5)
# estimate variable importance
importance.Fundraised.lvq <- varImp(model.Fundraised.lvq, scale=FALSE)
# summarize importance
importance.Fundraised.lvq
# Boosted Tree Classification-----------------------------------------------------------------
#Use this for importance and Modeling choice
model.Fundraised.gbm = gbm(Fundraised ~ .,
data = df.train.transformed,
distribution = "gaussian",
n.trees = 5000,
shrinkage = 0.01,
interaction.depth = 4,
verbose = FALSE)
# Variable Importance
Fundraised.gbm.summary <- summary(model.Fundraised.gbm)
data.frame(var=Fundraised.gbm.summary$var, rel.inf=Fundraised.gbm.summary$rel.inf)
# Select Most Important Variables ----------------------------------------------
MostImportantVars.Fundraised <- df.train %>%
select(c(MeanLeadTime, DistanceTraveled, SentEmails, MeanGoal, MeanTeamGoal,
UpdatedPersonalPage, SelfDonated, ProvidedParticipationReason,
RepeatParticipant, ModifiedGoal, CompletedReg, Fundraised))
MostImportantVars.Fundraised.test <- df.test %>%
select(c(MeanLeadTime, DistanceTraveled, SentEmails, MeanGoal, MeanTeamGoal,
UpdatedPersonalPage, SelfDonated, ProvidedParticipationReason,
RepeatParticipant, ModifiedGoal, CompletedReg, Fundraised))
MostImportantVars.Fundraised.train <- df.train %>%
select(c(MeanLeadTime, DistanceTraveled, SentEmails, MeanGoal, MeanTeamGoal,
UpdatedPersonalPage, SelfDonated, ProvidedParticipationReason,
RepeatParticipant, ModifiedGoal, CompletedReg, Fundraised))
MostImportantVars.Fundraised.Integer <- data.frame(lapply(MostImportantVars.Fundraised, as.integer))
# Correlation Matrix -----------------------------------------------------------
# Make a correlation matrix for the most important vars
correlationMatrix.Fundraised <- cor(MostImportantVars.Fundraised.Integer)
print(correlationMatrix.Fundraised)
corrplot(correlationMatrix.Fundraised)
# Find the values in the correlation matrix that are highly correlated (value
# greater than 0.5)
highlyCorrelated.Fundraised <-
findCorrelation(correlationMatrix.Fundraised, cutoff=0.5, names=TRUE)
print(highlyCorrelated.Fundraised)
model.Fundraised.logit <- glm(Fundraised ~MeanLeadTime+DistanceTraveled+SentEmails+
MeanGoal+MeanTeamGoal+UpdatedPersonalPage+SelfDonated+
ProvidedParticipationReason+RepeatParticipant+
ModifiedGoal+CompletedReg,
family=binomial(link='logit'),data=MostImportantVars.Model.Fundraised)
MostImportantVars.Model.Fundraised <- df.train %>%
select(c(MeanLeadTime, DistanceTraveled, SentEmails, MeanGoal, MeanTeamGoal,
UpdatedPersonalPage, SelfDonated, ProvidedParticipationReason,
RepeatParticipant, ModifiedGoal, CompletedReg,Fundraised))
model.Fundraised.logit <- glm(Fundraised ~MeanLeadTime+DistanceTraveled+SentEmails+
MeanGoal+MeanTeamGoal+UpdatedPersonalPage+SelfDonated+
ProvidedParticipationReason+RepeatParticipant+
ModifiedGoal+CompletedReg,
family=binomial(link='logit'),data=MostImportantVars.Model.Fundraised)
#GLM Caret
glmGrid = expand.grid(.parameter = seq(1,10,1))
set.seed(7)
fit.glm <- train(Fundraised~., data=MostImportantVars.Model.Fundraised, method='glm', metric="Accuracy",
trControl=trCtrl, tuneGrid = data.frame(glmGrid))
summary(fit.glm)
#attempt to use folding techniques
fit3.glm <- train(Fundraised~., data=MostImportantVars.Model.Fundraised,
trControl = trCtrl, metric="Accuracy",
method="glm", family="binomial")
summary(fit3.glm)
#model
summary(model.Fundraised.logit)
anova(model.Fundraised.logit, test="Chisq")
#Logit train results
fitted.logit.train.results <- predict(model.Fundraised.logit,newdata=subset(df.train,
select=c(MeanLeadTime, DistanceTraveled, SentEmails,
MeanGoal, MeanTeamGoal,UpdatedPersonalPage, SelfDonated,
ProvidedParticipationReason,RepeatParticipant, ModifiedGoal,
CompletedReg)),type='response')
predictions.train.logit <- data.frame(Fundraised = df.train$Fundraised,
Pred.Fundraised = fitted.logit.train.results)
predictions.train.logit$Fundraised<-ifelse(predictions.train.logit$Fundraised=="Yes",1,0)
predictions.train.logit$Pred.Fundraised <- ifelse(predictions.train.logit$Pred.Fundraised > 0.3,1,0)
#Convert to factors for Confusion Matrix
predictions.train.logit$Fundraised <- as.factor(predictions.train.logit$Fundraised)
predictions.train.logit$Pred.Fundraised <- as.factor(predictions.train.logit$Pred.Fundraised)
#Creating confusion matrix
train.logit.confusion <- confusionMatrix(data=predictions.train.logit$Pred.Fundraised, reference = predictions.train.logit$Fundraised)
train.logit.confusion
#Predictions Logit Regression---------------------------------------------------
fitted.results <- predict(model.Fundraised.logit,newdata=subset(df.test,
select=c(MeanLeadTime, DistanceTraveled, SentEmails,
MeanGoal, MeanTeamGoal,UpdatedPersonalPage, SelfDonated,
ProvidedParticipationReason,RepeatParticipant, ModifiedGoal,
CompletedReg)),type='response')
# Logit Predictions on hold out
predictions.logit <- data.frame(Fundraised = df.test$Fundraised,
Pred.Fundraised = fitted.results)
predictions.logit$Fundraised<-ifelse(predictions.logit$Fundraised=="Yes",1,0)
predictions.logit$Pred.Fundraised <- ifelse(predictions.logit$Pred.Fundraised > 0.25,1,0)
#Convert to factors for Confusion Matrix
predictions.logit$Fundraised <- as.factor(predictions.logit$Fundraised)
predictions.logit$Pred.Fundraised <- as.factor(predictions.logit$Pred.Fundraised)
#Creating confusion matrix
logit.confusion <- confusionMatrix(data=predictions.logit$Pred.Fundraised, reference = predictions.logit$Fundraised)
logit.confusion
#Display results
write.csv(predictions.logit, "./submission_logit.csv", row.names=FALSE)
# Plot Importance of LVQ
png(filename = "FundraisedGraphs/LVQImportance.png")
plot(importance.Fundraised.lvq)
dev.off()
# GBM Performance Plot
numTrees = seq(from=100 ,to=5000, by=100)
df.test$Fundraised <- as.numeric(df.test$Fundraised)
predmatrix<-predict(model.Fundraised.gbm, df.test, n.trees = numTrees)
dim(predmatrix)
test.error<-with(df.test,apply( (predmatrix-Fundraised)^2,2,mean))
head(test.error)
png(filename = "FundraisedGraphs/GBMPerformance.png")
plot(numTrees,
test.error,
pch=19,
col="blue",
xlab="Number of Trees",
ylab="Test Error",
main = "Perfomance of Boosting on Test Set")
abline(h = min(test.error),col="red")
legend("topright",c("Minimum Test error Line for Random Forests"),col="red",lty=1,lwd=1)
dev.off()
# LASSO with GLMNET ------------------------------------------------------------
df.Fundraised.train.glmnet <- MostImportantVars.Fundraised.train
df.Fundraised.test.glmnet <- MostImportantVars.Fundraised.test
model.Fundraised.glmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
summary(model.Fundraised.glmnet)
coef(model.Fundraised.glmnet)
model.Fundraised.glmnet
#CV model run
model.Fundraised.CVglmnet <- cv.glmnet(
x=data.matrix(dplyr::select(df.Fundraised.train.glmnet, -Fundraised)),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
summary(model.Fundraised.CVglmnet)
coef(model.Fundraised.CVglmnet)
model.Fundraised.CVglmnet
bestLambda.Fundraised <- model.Fundraised.CVglmnet$lambda.min
bestLambda.Fundraised
#model run with best lambda from cv
model.Fundraised.bestCVglmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
family="binomial",
lambda=bestLambda.Fundraised,
trace.it=1)
summary(model.Fundraised.bestCVglmnet)
coef(model.Fundraised.bestCVglmnet)
model.Fundraised.bestCVglmnet
#CV model run
model.Fundraised.CVglmnet <- cv.glmnet(
x=data.matrix(dplyr::select(df.Fundraised.train.glmnet, -Fundraised)),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
model.Fundraised.glmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
summary(model.Fundraised.glmnet)
coef(model.Fundraised.glmnet)
model.Fundraised.glmnet
#CV model run
model.Fundraised.CVglmnet <- cv.glmnet(
x=data.matrix(dplyr::select(df.Fundraised.train.glmnet, -Fundraised)),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
summary(model.Fundraised.CVglmnet)
coef(model.Fundraised.CVglmnet)
model.Fundraised.CVglmnet
bestLambda.Fundraised <- model.Fundraised.CVglmnet$lambda.min
bestLambda.Fundraised
#model run with best lambda from cv
model.Fundraised.bestCVglmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
family="binomial",
lambda=bestLambda.Fundraised,
trace.it=1)
summary(model.Fundraised.bestCVglmnet)
coef(model.Fundraised.bestCVglmnet)
model.Fundraised.bestCVglmnet
# CV GLMnet Testing with best lambda model
# Testing across multiple thresholds, probably don't neet to use
# but just in case you want to speed up testing multiple thresholds
bestThreshAccuracy <- 0
bestAccuracy <- 0
bestThreshKappa <- 0
bestKappa <- 0  ##Look at Fundraised in df.fundraised.test.glmnet it is 1 or 2
for (predThresh in seq(0.3,0.7,by=0.01)) {
print(predThresh)
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > predThresh, 1, 0)))
levels(preds.Fundraised.CVglmnet) <- c("No", "Yes")
cm <- confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
if (cm$overall[1] > bestAccuracy) {
bestThreshAccuracy <- predThresh
bestAccuracy <- cm$overall[1]
}
if (cm$overall[2] > bestKappa) {
bestThreshKappa <- predThresh
bestKappa <- cm$overall[2]
}
}
#Decisions tree one
DT1.Fundraised<-rpart(Fundraised~.,data=AllWalkData.ModelVars)
bestThreshAccuracy
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.SelfDonated.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -SelfDonated)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > 0.3, 1, 0)))
levels(preds.SelfDonated.CVglmnet) <- c("No", "Yes")
confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
View(preds.SelfDonated.CVglmnet)
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.SelfDonated.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -SelfDonated)),
s=bestLambda.Fundraised,
type="response")
head(preds.Fundraised.CVglmnet)
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -SelfDonated)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > 0.3, 1, 0)))
levels(preds.SelfDonated.CVglmnet) <- c("No", "Yes")
confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
View(preds.SelfDonated.CVglmnet)
View(preds.SelfDonated.CVglmnet)
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > 0.5, 1, 0)))
levels(preds.SelfDonated.CVglmnet) <- c("No", "Yes")
confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
View(preds.SelfDonated.CVglmnet)
View(preds.SelfDonated.CVglmnet)
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -SelfDonated)),
s=bestLambda.Fundraised,
type="response")
View(preds.Fundraised.CVglmnet)
# LASSO with GLMNET ------------------------------------------------------------
df.Fundraised.train.glmnet <- MostImportantVars.Fundraised.train
df.Fundraised.test.glmnet <- MostImportantVars.Fundraised.test
model.Fundraised.glmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
View(model.Fundraised.glmnet)
View(model.Fundraised.glmnet)
head(model.Fundraised.CVglmnet)
summary(model.Fundraised.glmnet)
coef(model.Fundraised.glmnet)
model.Fundraised.glmnet
#CV model run
model.Fundraised.CVglmnet <- cv.glmnet(
x=data.matrix(dplyr::select(df.Fundraised.train.glmnet, -Fundraised)),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
summary(model.Fundraised.CVglmnet)
coef(model.Fundraised.CVglmnet)
model.Fundraised.CVglmnet
bestLambda.Fundraised <- model.Fundraised.CVglmnet$lambda.min
bestLambda.Fundraised
#model run with best lambda from cv
model.Fundraised.bestCVglmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
family="binomial",
lambda=bestLambda.Fundraised,
trace.it=1)
summary(model.Fundraised.bestCVglmnet)
coef(model.Fundraised.bestCVglmnet)
model.Fundraised.bestCVglmnet
# CV GLMnet Testing with best lambda model
# Testing across multiple thresholds, probably don't neet to use
# but just in case you want to speed up testing multiple thresholds
bestThreshAccuracy <- 0
bestAccuracy <- 0
bestThreshKappa <- 0
bestKappa <- 0
for (predThresh in seq(0.3,0.7,by=0.01)) {
print(predThresh)
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > predThresh, 1, 0)))
levels(preds.Fundraised.CVglmnet) <- c("No", "Yes")
cm <- confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
if (cm$overall[1] > bestAccuracy) {
bestThreshAccuracy <- predThresh
bestAccuracy <- cm$overall[1]
}
if (cm$overall[2] > bestKappa) {
bestThreshKappa <- predThresh
bestKappa <- cm$overall[2]
}
}
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -SelfDonated)),
s=bestLambda.Fundraised,
type="response")
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > 0.5, 1, 0)))
levels(preds.SelfDonated.CVglmnet) <- c("No", "Yes")
confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
# LASSO with GLMNET ------------------------------------------------------------
df.Fundraised.train.glmnet <- MostImportantVars.Fundraised.train
df.Fundraised.test.glmnet <- MostImportantVars.Fundraised.test
model.Fundraised.glmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
summary(model.Fundraised.glmnet)
coef(model.Fundraised.glmnet)
model.Fundraised.glmnet
#CV model run
model.Fundraised.CVglmnet <- cv.glmnet(
x=data.matrix(dplyr::select(df.Fundraised.train.glmnet, -Fundraised)),
y=df.Fundraised.train.glmnet$Fundraised,
alpha=1,
family="binomial",
trace.it=1)
summary(model.Fundraised.CVglmnet)
coef(model.Fundraised.CVglmnet)
model.Fundraised.CVglmnet
bestLambda.Fundraised <- model.Fundraised.CVglmnet$lambda.min
bestLambda.Fundraised
#model run with best lambda from cv
model.Fundraised.bestCVglmnet <- glmnet(
x=dplyr::select(df.Fundraised.train.glmnet, -Fundraised),
y=df.Fundraised.train.glmnet$Fundraised,
family="binomial",
lambda=bestLambda.Fundraised,
trace.it=1)
summary(model.Fundraised.bestCVglmnet)
coef(model.Fundraised.bestCVglmnet)
model.Fundraised.bestCVglmnet
# CV GLMnet Testing with best lambda model
# Testing across multiple thresholds, probably don't neet to use
# but just in case you want to speed up testing multiple thresholds
bestThreshAccuracy <- 0
bestAccuracy <- 0
bestThreshKappa <- 0
bestKappa <- 0
for (predThresh in seq(0.3,0.7,by=0.01)) {
print(predThresh)
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > predThresh, 1, 0)))
levels(preds.Fundraised.CVglmnet) <- c("No", "Yes")
cm <- confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
if (cm$overall[1] > bestAccuracy) {
bestThreshAccuracy <- predThresh
bestAccuracy <- cm$overall[1]
}
if (cm$overall[2] > bestKappa) {
bestThreshKappa <- predThresh
bestKappa <- cm$overall[2]
}
}
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > 0.5, 1, 0)))
levels(preds.Fundraised.CVglmnet) <- c("No", "Yes")
confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > 0.3, 1, 0)))
levels(preds.Fundraised.CVglmnet) <- c("No", "Yes")
confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
preds.Fundraised.CVglmnet <- as.factor(c(ifelse(preds.Fundraised.CVglmnet > 0.7, 1, 0)))
levels(preds.Fundraised.CVglmnet) <- c("No", "Yes")
confusionMatrix(preds.Fundraised.CVglmnet, df.Fundraised.test.glmnet$Fundraised)
# Best Accuracy
# Best Kappa
# Testing across one threshold
preds.Fundraised.CVglmnet <- predict(model.Fundraised.bestCVglmnet,
newx=data.matrix(dplyr::select(df.Fundraised.test.glmnet, -Fundraised)),
s=bestLambda.Fundraised,
type="response")
